name: 🛡️ S3 Security Gatekeeper (Debug)

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.tf'
      - '**/*.json'
      - '.github/workflows/fix-s3-acl.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.tf'
      - '**/*.json'
  workflow_dispatch:
    inputs:
      scan_all:
        description: 'Scan all files (not just changed)'
        required: false
        default: 'false'
        type: boolean
      auto_fix:
        description: 'Auto-generate fixes for S3 issues'
        required: false
        default: 'true'
        type: boolean
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: 'true'
        type: boolean

env:
  CHECKOV_VERSION: "3.2.0"
  PYTHON_VERSION: "3.11"
  DEBUG: ${{ github.event.inputs.debug_mode || 'true' }}

jobs:
  security-scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Checkov
        run: pip install checkov==${{ env.CHECKOV_VERSION }}

      - name: Run Checkov
        run: |
          mkdir -p checkov_reports
          checkov --directory . --framework terraform --output json --output-file checkov_reports/report.json || true

      - name: Upload Checkov Report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-scan-results
          path: checkov_reports/

  generate-fixes:
    name: 🔧 Generate Fixes
    needs: security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download Checkov Report
        uses: actions/download-artifact@v4
        with:
          name: checkov-scan-results
          path: checkov_reports/

      - name: Generate Fixes
        run: |
          mkdir -p scripts
          cat > scripts/fix_s3_buckets.py << 'EOF'
import json
import os
import re
from pathlib import Path
from datetime import datetime

S3_PUBLIC_CHECKS = {
    "CKV_AWS_20": "S3 Bucket has an ACL defined which allows public access",
    "CKV2_AWS_6": "Ensure that S3 bucket has S3 Bucket Public Access Block enabled",
    "CKV_AWS_21": "Ensure S3 bucket has server-side encryption enabled",
    "CKV_AWS_18": "Ensure S3 bucket has access logging enabled",
    "CKV_AWS_19": "Ensure S3 bucket has MFA delete enabled",
    "CKV_AWS_54": "Ensure S3 bucket has block public policy enabled",
    "CKV_AWS_55": "Ensure S3 bucket has ignore public ACLs enabled",
    "CKV_AWS_56": "Ensure S3 bucket has restrict public bucket policies enabled"
}

def fix_terraform_content(content, bucket_name, check_id):
    if check_id == "CKV_AWS_20":
        content = re.sub(r'acl\s*=\s*"public-read(-write)?"', 'acl = "private"', content)
    elif check_id == "CKV_AWS_21" and "server_side_encryption_configuration" not in content:
        content += f'''
resource "aws_s3_bucket_server_side_encryption_configuration" "{bucket_name}_encryption" {{
  bucket = aws_s3_bucket.{bucket_name}.id

  rule {{
    apply_server_side_encryption_by_default {{
      sse_algorithm = "AES256"
    }}
  }}
}}
'''
    elif check_id == "CKV2_AWS_6" and "aws_s3_bucket_public_access_block" not in content:
        content += f'''
resource "aws_s3_bucket_public_access_block" "{bucket_name}_pab" {{
  bucket = aws_s3_bucket.{bucket_name}.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}}
'''
    return content

def main():
    print("🔧 Running S3 fixer...")
    os.makedirs("fixed_terraform", exist_ok=True)

    try:
        with open("checkov_reports/report.json", "r") as f:
            data = json.load(f)
    except Exception as e:
        print(f"❌ Failed to read report: {e}")
        return

    failed_checks = data.get("results", {}).get("failed_checks", [])
    for check in failed_checks:
        check_id = check.get("check_id")
        if check_id in S3_PUBLIC_CHECKS:
            file_path = check.get("file_path")
            resource = check.get("resource", "")
            bucket_name = resource.split(".")[-1]

            if not file_path or not os.path.exists(file_path):
                continue

            with open(file_path, "r") as f:
                content = f.read()

            updated = fix_terraform_content(content, bucket_name, check_id)
            if updated != content:
                output_path = os.path.join("fixed_terraform", os.path.basename(file_path))
                with open(output_path, "w") as f:
                    f.write(updated)
                print(f"✅ Fixed: {check_id} in {file_path}")
            else:
                print(f"⚠️ No change for {file_path}")

if __name__ == "__main__":
    main()
EOF

          python scripts/fix_s3_buckets.py

      - name: Upload Fixed Files
        uses: actions/upload-artifact@v4
        with:
          name: fixed-s3-files
          path: fixed_terraform/
