name: S3 Security Remediation

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (generate fixes without applying)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      target_directory:
        description: 'Directory to scan for Terraform files'
        required: false
        default: 'terraform'
        type: string

jobs:
  security-scan:
    runs-on: ubuntu-latest
    outputs:
      has_s3_issues: ${{ steps.checkov-scan.outputs.has_s3_issues }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Security Tools
        run: |
          pip install checkov
          pip install boto3  # For future AWS integration

      - name: Run Checkov Security Scan
        id: checkov-scan
        run: |
          mkdir -p checkov_reports
          
          # Run Checkov scan
          checkov -d ${{ github.event.inputs.target_directory || 'terraform' }} \
            --output json \
            --soft-fail \
            --check CKV_AWS_20,CKV_AWS_21,CKV2_AWS_6 \
            > checkov_reports/report.json
          
          # Check if S3 issues exist
          if grep -q "CKV_AWS_20\|CKV_AWS_21\|CKV2_AWS_6" checkov_reports/report.json; then
            echo "has_s3_issues=true" >> $GITHUB_OUTPUT
          else
            echo "has_s3_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Security Report
        run: |
          python scripts/generate_md_report.py

      - name: Upload Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: checkov_reports/
          retention-days: 30

  s3-remediation:
    runs-on: ubuntu-latest
    needs: security-scan
    if: needs.security-scan.outputs.has_s3_issues == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Run S3 Security Remediation
        run: |
          echo "🔍 Starting S3 security remediation..."
          
          # Set environment variables
          export SOURCE_DIR="${{ github.event.inputs.target_directory || 'terraform' }}"
          export DRY_RUN="${{ github.event.inputs.dry_run || 'true' }}"
          
          # Run the enhanced remediation script
          python scripts/fix_s3_acl_rule_based.py

      - name: Validate Generated Configurations
        run: |
          echo "🔍 Validating generated Terraform configurations..."
          
          # Install terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform
          
          # Validate each generated .tf file
          if [ -d "fix_artifacts" ]; then
            for tf_file in fix_artifacts/*.tf; do
              if [ -f "$tf_file" ]; then
                echo "Validating $tf_file..."
                terraform fmt -check=true "$tf_file" || echo "❌ Format check failed for $tf_file"
                terraform validate "$tf_file" || echo "❌ Validation failed for $tf_file"
              fi
            done
          fi

      - name: Create Pull Request (if not dry-run)
        if: github.event.inputs.dry_run == 'false'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            🔒 Security: Fix S3 bucket misconfigurations
            
            - Automated remediation of public S3 buckets
            - Applied security best practices
            - Generated secure configurations
            
            This PR was automatically generated by the Security Gatekeeper.
          title: '🔒 [Security] S3 Bucket Remediation'
          body: |
            ## 🛡️ S3 Security Remediation
            
            This PR contains automated fixes for S3 bucket security misconfigurations detected by our security gatekeeper.
            
            ### 🔍 What was detected:
            - Public S3 buckets that should be private
            - Missing encryption configurations
            - Inadequate access controls
            
            ### 🔧 What was fixed:
            - Changed ACLs from public to private (where appropriate)
            - Added server-side encryption
            - Enabled versioning
            - Added public access blocks
            - Applied security tags
            
            ### 📋 Review Checklist:
            - [ ] Review the remediation report in `fix_artifacts/`
            - [ ] Verify intentional public buckets were handled correctly
            - [ ] Test configurations in development environment
            - [ ] Confirm no business functionality is broken
            
            ### 🚀 Next Steps:
            1. Review and approve this PR
            2. Test in staging environment
            3. Deploy to production during maintenance window
            4. Monitor for any access issues
            
            ---
            🤖 *This PR was automatically generated by the Security Gatekeeper*
          branch: security/s3-remediation
          delete-branch: true

      - name: Upload Remediation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: s3-remediation-artifacts
          path: fix_artifacts/
          retention-days: 90

      - name: Post Summary Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read the remediation report
              const reportPath = 'fix_artifacts/s3_remediation_report.md';
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## 🛡️ S3 Security Remediation Results\n\n${report}`
                });
              }
            } catch (error) {
              console.log('Could not post report comment:', error.message);
            }

  security-validation:
    runs-on: ubuntu-latest
    needs: [security-scan, s3-remediation]
    if: always() && needs.s3-remediation.result == 'success'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Remediation Artifacts
        uses: actions/download-artifact@v4
        with:
          name: s3-remediation-artifacts
          path: fix_artifacts/

      - name: Re-scan Fixed Configurations
        run: |
          echo "🔍 Validating that fixes resolve security issues..."
          
          pip install checkov
          
          # Scan the fixed configurations
          if [ -d "fix_artifacts" ]; then
            checkov -d fix_artifacts/ \
              --output json \
              --soft-fail \
              --check CKV_AWS_20,CKV_AWS_21,CKV2_AWS_6 \
              > validation_results.json || true
            
            # Check if any S3 issues remain
            if grep -q "FAILED" validation_results.json; then
              echo "⚠️ Some security issues may remain in fixed configurations"
              cat validation_results.json
            else
              echo "✅ All S3 security issues appear to be resolved"
            fi
          fi

      - name: Generate Final Security Report
        run: |
          echo "# 🎯 Final Security Validation Report" > final_report.md
          echo "" >> final_report.md
          echo "## Original Issues" >> final_report.md
          echo "- S3 buckets with public ACLs detected" >> final_report.md
          echo "- Misconfigurations found in Terraform files" >> final_report.md
          echo "" >> final_report.md
          echo "## Remediation Applied" >> final_report.md
          echo "- Generated secure configurations" >> final_report.md
          echo "- Applied security best practices" >> final_report.md
          echo "- Preserved intentional public buckets with enhanced security" >> final_report.md
          echo "" >> final_report.md
          echo "## Validation Results" >> final_report.md
          
          if [ -f "validation_results.json" ]; then
            echo "- Re-scan completed on fixed configurations" >> final_report.md
            if grep -q "FAILED" validation_results.json; then
              echo "- ⚠️ Some issues may require manual review" >> final_report.md
            else
              echo "- ✅ All detected issues appear resolved" >> final_report.md
            fi
          fi

      - name: Upload Final Report
        uses: actions/upload-artifact@v4
        with:
          name: final-security-report
          path: |
            final_report.md
            validation_results.json
          retention-days: 90

  notify-teams:
    runs-on: ubuntu-latest
    needs: [security-scan, s3-remediation, security-validation]
    if: always()
    
    steps:
      - name: Notify Security Team
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');
            
            // Determine the outcome
            const scanResult = '${{ needs.security-scan.result }}';
            const remediationResult = '${{ needs.s3-remediation.result }}';
            const validationResult = '${{ needs.security-validation.result }}';
            
            let status = '✅ Success';
            let color = 'success';
            
            if (scanResult === 'failure' || remediationResult === 'failure') {
              status = '❌ Failed';
              color = 'failure';
            } else if (remediationResult === 'skipped') {
              status = '✅ No Issues Found';
              color = 'success';
            }
            
            // Create an issue for tracking (optional)
            if (remediationResult === 'success') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔒 S3 Security Remediation Complete - ${new Date().toISOString().split('T')[0]}`,
                body: `## 🛡️ Security Gatekeeper Report
                
### Workflow Summary
- **Status**: ${status}
- **Scan Result**: ${scanResult}
- **Remediation**: ${remediationResult}
- **Validation**: ${validationResult}
                
### Actions Taken
- Scanned Terraform configurations for S3 misconfigurations
- Generated secure replacement configurations
- Validated fixes resolve detected issues
                
### Next Steps
- [ ] Review generated configurations in artifacts
- [ ] Test in development environment
- [ ] Apply approved changes to production
- [ ] Monitor for any access issues
                
### Artifacts
- Security scan results
- Remediation configurations
- Validation reports
                
---
*Generated by Security Gatekeeper workflow*`,
                labels: ['security', 'automation', 's3', 'infrastructure']
              });
            }

      - name: Update Commit Status
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const state = '${{ needs.s3-remediation.result }}' === 'success' ? 'success' : 'failure';
            const description = state === 'success' 
              ? 'S3 security issues detected and fixed'
              : 'S3 security remediation failed';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'security/s3-remediation'
            });