name: Checkov Scan with Auto-Remediation

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      auto_fix:
        description: 'Automatically fix issues found by Checkov'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  checkov-scan-and-fix:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Fix for detached HEAD - ensure we're on the correct branch
          ref: ${{ github.head_ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install checkov pyyaml
          pip install -r requirements.txt || echo "No requirements.txt found, continuing..."

      - name: Create reports directory
        run: mkdir -p checkov_reports

      - name: Run Initial Checkov Scan
        run: |
          echo "üîç Running initial Checkov scan..."
          checkov -d . \
            --framework terraform,kubernetes \
            --output json \
            --soft-fail \
            --output-file-path checkov_reports/report_initial.json || true
          
          # Verify the file was created and has content
          if [ -f checkov_reports/report_initial.json ]; then
            echo "‚úÖ Initial scan completed"
            wc -l checkov_reports/report_initial.json
          else
            echo "‚ùå Initial scan failed, creating empty report"
            echo '{"results": {"failed_checks": [], "passed_checks": []}}' > checkov_reports/report_initial.json
          fi

      - name: Generate Initial Markdown Report
        run: |
          echo "üìÑ Generating initial report..."
          if [ -f checkov_reports/report_initial.json ]; then
            cp checkov_reports/report_initial.json checkov_reports/report.json
            python scripts/generate_md_report.py
            if [ -f checkov_reports/report.md ]; then
              cp checkov_reports/report.md checkov_reports/report_initial.md
              echo "‚úÖ Initial report generated"
            fi
          fi

      - name: Check for Auto-fixable Issues
        id: check_issues
        run: |
          echo "üîç Checking for auto-fixable security issues..."
          
          # Check for S3 encryption issues (only .tf files)
          s3_issues=0
          if find . -name "*.tf" -type f | head -1 | grep -q .; then
            s3_issues=$(find . -name "*.tf" -exec grep -l "aws_s3_bucket" {} \; 2>/dev/null | wc -l || echo "0")
          fi
          echo "Found $s3_issues Terraform files with S3 buckets"
          
          # Check for K8s security context issues (only .yaml/.yml files)
          k8s_issues=0
          if find . \( -name "*.yaml" -o -name "*.yml" \) -type f | head -1 | grep -q .; then
            k8s_issues=$(find . \( -name "*.yaml" -o -name "*.yml" \) -exec grep -l "kind: Deployment\|kind: Pod\|kind: StatefulSet\|kind: DaemonSet" {} \; 2>/dev/null | wc -l || echo "0")
          fi
          echo "Found $k8s_issues Kubernetes manifest files"
          
          echo "s3_count=$s3_issues" >> $GITHUB_OUTPUT
          echo "k8s_count=$k8s_issues" >> $GITHUB_OUTPUT
          
          # Set flags for whether to run fixes
          if [ "$s3_issues" -gt 0 ]; then
            echo "run_s3_fix=true" >> $GITHUB_OUTPUT
          else
            echo "run_s3_fix=false" >> $GITHUB_OUTPUT
          fi
          
          if [ "$k8s_issues" -gt 0 ]; then
            echo "run_k8s_fix=true" >> $GITHUB_OUTPUT
          else
            echo "run_k8s_fix=false" >> $GITHUB_OUTPUT
          fi

      - name: Auto-fix S3 Encryption Issues
        if: steps.check_issues.outputs.run_s3_fix == 'true' && (github.event.inputs.auto_fix == 'true' || github.event_name == 'pull_request')
        run: |
          echo "üîê Auto-fixing S3 encryption issues..."
          python scripts/fix_s3_encryption.py
          echo "‚úÖ S3 encryption fixes completed"

      - name: Auto-fix Kubernetes Security Context Issues
        if: steps.check_issues.outputs.run_k8s_fix == 'true' && (github.event.inputs.auto_fix == 'true' || github.event_name == 'pull_request')
        run: |
          echo "üõ°Ô∏è Auto-fixing Kubernetes security context issues..."
          python scripts/fix_k8s_security.py
          echo "‚úÖ Kubernetes security fixes completed"

      - name: Run Post-Fix Checkov Scan
        run: |
          echo "üîç Running post-fix Checkov scan..."
          checkov -d . \
            --framework terraform,kubernetes \
            --output json \
            --soft-fail \
            --output-file-path checkov_reports/report.json || true
          
          # Verify the file was created
          if [ -f checkov_reports/report.json ]; then
            echo "‚úÖ Post-fix scan completed"
            wc -l checkov_reports/report.json
          else
            echo "‚ùå Post-fix scan failed, using initial report"
            cp checkov_reports/report_initial.json checkov_reports/report.json
          fi

      - name: Generate Final Markdown Report
        run: |
          echo "üìÑ Generating final security report..."
          python scripts/generate_md_report.py
          if [ -f checkov_reports/report.md ]; then
            echo "‚úÖ Final report generated successfully"
            echo "Report size: $(wc -l checkov_reports/report.md)"
          else
            echo "‚ùå Failed to generate final report"
          fi

      - name: Compare Results
        run: |
          echo "üìä Comparing scan results..."
          initial_fails=0
          final_fails=0
          
          # Parse initial results
          if [ -f checkov_reports/report_initial.json ]; then
            initial_fails=$(python3 -c "
import json
try:
    with open('checkov_reports/report_initial.json', 'r') as f:
        data = json.load(f)
    if 'results' in data and 'failed_checks' in data['results']:
        print(len(data['results']['failed_checks']))
    elif 'failed_checks' in data:
        print(len(data['failed_checks']))
    else:
        print('0')
except:
    print('0')
" || echo "0")
          fi
          
          # Parse final results
          if [ -f checkov_reports/report.json ]; then
            final_fails=$(python3 -c "
import json
try:
    with open('checkov_reports/report.json', 'r') as f:
        data = json.load(f)
    if 'results' in data and 'failed_checks' in data['results']:
        print(len(data['results']['failed_checks']))
    elif 'failed_checks' in data:
        print(len(data['failed_checks']))
    else:
        print('0')
except:
    print('0')
" || echo "0")
          fi
          
          fixes_applied=$((initial_fails - final_fails))
          if [ $fixes_applied -lt 0 ]; then
            fixes_applied=0
          fi
          
          echo "Initial failed checks: $initial_fails"
          echo "Final failed checks: $final_fails"  
          echo "Issues fixed: $fixes_applied"
          
          echo "initial_fails=$initial_fails" >> $GITHUB_ENV
          echo "final_fails=$final_fails" >> $GITHUB_ENV
          echo "fixes_applied=$fixes_applied" >> $GITHUB_ENV

      - name: Check for changes
        id: check_changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected, ready to commit"
            git status --short
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes to commit"
          fi

      - name: Commit Auto-fixes
        if: steps.check_changes.outputs.has_changes == 'true' && github.event_name == 'pull_request'
        run: |
          # Configure git with proper user info
          git config user.name "checkov-auto-fix[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Ensure we're on the right branch
          echo "Current branch: $(git branch --show-current)"
          echo "Current HEAD: $(git rev-parse HEAD)"
          
          # Add changes
          git add .
          
          # Create commit message
          commit_msg="üõ°Ô∏è Auto-fix: Security issues resolved by Checkov

üîê S3 Encryption fixes applied: ${{ steps.check_issues.outputs.s3_count }} files checked
üõ°Ô∏è Kubernetes security contexts added: ${{ steps.check_issues.outputs.k8s_count }} files checked

üìä Scan Results:
- Before: ${{ env.initial_fails }} failed checks  
- After: ${{ env.final_fails }} failed checks
- Fixed: ${{ env.fixes_applied }} issues

Co-authored-by: checkov-auto-fix[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          
          # Commit changes
          git commit -m "$commit_msg"
          
          # Push to the PR branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git push origin HEAD:${{ github.head_ref }}
            echo "‚úÖ Auto-fixes committed and pushed to PR branch"
          else
            git push
            echo "‚úÖ Auto-fixes committed and pushed"
          fi

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkov-security-reports
          path: checkov_reports/
          retention-days: 7

      - name: Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = 'checkov_reports/report.md';
            
            try {
              let reportContent = '';
              
              // Check if report exists and has content
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                
                if (report.trim()) {
                  // Add auto-fix summary header
                  const autoFixSummary = `# üõ°Ô∏è Checkov Security Scan Results
            
            ## ü§ñ Auto-Remediation Summary
            
            | Metric | Value |
            |--------|-------|
            | üîç **Initial Issues** | ${{ env.initial_fails || 'N/A' }} |
            | ‚úÖ **Issues Auto-Fixed** | ${{ env.fixes_applied || '0' }} |
            | ‚ùå **Remaining Issues** | ${{ env.final_fails || 'N/A' }} |
            | üîê **S3 Files Checked** | ${{ steps.check_issues.outputs.s3_count }} |
            | üõ°Ô∏è **K8s Files Checked** | ${{ steps.check_issues.outputs.k8s_count }} |
            | üìù **Changes Committed** | ${{ steps.check_changes.outputs.has_changes == 'true' && 'Yes' || 'No' }} |
            
            ${ process.env.fixes_applied > 0 ? 'üéâ **Auto-fixes have been applied and committed to this PR!**' : '‚ö†Ô∏è **No auto-fixes were applied.**' }
            
            ---
            
            `;
                  
                  reportContent = autoFixSummary + report;
                } else {
                  reportContent = 'Report file exists but is empty.';
                }
              } else {
                reportContent = `# ‚ùå Checkov Security Scan
            
            **Status**: Scan completed but no detailed report was generated.
            
            ## ü§ñ Auto-Fix Summary
            - S3 Encryption fixes attempted: ${{ steps.check_issues.outputs.s3_count }} files
            - Kubernetes security fixes attempted: ${{ steps.check_issues.outputs.k8s_count }} files
            - Changes committed: ${{ steps.check_changes.outputs.has_changes == 'true' && 'Yes' || 'No' }}
            
            Please check the workflow logs for more details.`;
              }
              
              // Truncate if too long (GitHub comment limit)
              const maxLength = 65000;
              if (reportContent.length > maxLength) {
                reportContent = reportContent.substring(0, maxLength) + '\n\n... (Report truncated due to length limit)';
              }
              
              // Post comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportContent
              });
              
              console.log('‚úÖ Successfully posted security report to PR');
              
            } catch (error) {
              console.error('‚ùå Error posting comment:', error);
              
              // Post a fallback comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `# üõ°Ô∏è Checkov Security Scan Completed
            
            The security scan has completed, but there was an issue generating the detailed report.
            
            **Auto-fixes applied**: ${{ env.fixes_applied || '0' }}
            **Files checked**: S3(${{ steps.check_issues.outputs.s3_count }}) K8s(${{ steps.check_issues.outputs.k8s_count }})
            
            Please check the workflow artifacts for detailed reports.`
              });
            }

      - name: Create Issue for Manual Review
        if: env.final_fails > 0 && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueTitle = `üö® Security Issues Require Manual Review - PR #${{ github.event.number }}`;
            const issueBody = `# üö® Security Issues Require Manual Attention
            
            The automated security scan found **${{ env.final_fails }} issues** that require manual review.
            
            ## üìã Details
            - **PR**: #${{ github.event.number }}
            - **Branch**: \`${{ github.head_ref }}\`
            - **Commit**: \`${{ github.sha }}\`
            - **Scan Date**: ${{ github.run_id }}
            
            ## üìä Results Summary
            - üîç **Initial Issues**: ${{ env.initial_fails }}
            - ‚úÖ **Auto-Fixed**: ${{ env.fixes_applied }}
            - ‚ùå **Manual Review Required**: ${{ env.final_fails }}
            
            ## üîß Auto-Fix Coverage
            - **S3 Encryption**: ‚úÖ Automatically fixed
            - **Kubernetes Security Contexts**: ‚úÖ Automatically fixed
            - **Other Issues**: ‚ùå Require manual review
            
            ## üìù Next Steps
            1. Review the detailed security report in the PR comments
            2. Address remaining issues manually
            3. Test your changes in a development environment
            4. Re-run the security scan to verify fixes
            
            ## üìé Resources
            - [Checkov Documentation](https://www.checkov.io/2.Basics/CLI%20Command%20Reference.html)
            - [Security Report Artifact](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            _This issue was automatically created by the Checkov security scanning workflow._`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['security', 'checkov', 'manual-review-required', 'auto-generated']
            });
            
            console.log('‚úÖ Created issue for manual security review');

      - name: Workflow Summary
        if: always()
        run: |
          echo "## üõ°Ô∏è Checkov Auto-Remediation Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Initial Issues | ${{ env.initial_fails || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ Issues Fixed | ${{ env.fixes_applied || '0' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ùå Remaining Issues | ${{ env.final_fails || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîê S3 Files Processed | ${{ steps.check_issues.outputs.s3_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üõ°Ô∏è K8s Files Processed | ${{ steps.check_issues.outputs.k8s_count }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìù Changes Applied | ${{ steps.check_changes.outputs.has_changes == 'true' && 'Yes' || 'No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.fixes_applied }}" -gt 0 ]; then
            echo "üéâ **Auto-remediation successful!** ${{ env.fixes_applied }} security issues were automatically fixed." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ÑπÔ∏è **No auto-fixes applied.** Either no issues were found or they require manual attention." >> $GITHUB_STEP_SUMMARY
          fi