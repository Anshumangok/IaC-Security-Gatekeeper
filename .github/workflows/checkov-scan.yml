name: Checkov Scan with Auto-Remediation

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      auto_fix:
        description: 'Automatically fix issues found by Checkov'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  checkov-scan-and-fix:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install checkov pyyaml
          pip install -r requirements.txt || echo "No requirements.txt found, continuing..."

      - name: Create reports directory
        run: mkdir -p checkov_reports

      - name: Run Initial Checkov Scan
        run: |
          echo "üîç Running initial Checkov scan..."
          checkov -d . --output json --soft-fail > checkov_reports/report_initial.json || true
          # Alternative method if above fails
          if [ ! -f checkov_reports/report_initial.json ] || [ ! -s checkov_reports/report_initial.json ]; then
            echo "Trying alternative Checkov command..."
            checkov --directory . --output json --soft-fail --output-file-path checkov_reports/report_initial.json || true
          fi

      - name: Generate Initial Markdown Report
        run: |
          echo "üìÑ Generating initial report..."
          python scripts/generate_md_report.py
          if [ -f checkov_reports/report.md ]; then
            cp checkov_reports/report.md checkov_reports/report_initial.md
          fi

      - name: Check for Auto-fixable Issues
        id: check_issues
        run: |
          echo "üîç Checking for auto-fixable security issues..."
          
          # Check for S3 encryption issues
          s3_issues=$(grep -r "aws_s3_bucket" . --include="*.tf" | wc -l || echo "0")
          echo "Found $s3_issues S3 buckets to check"
          
          # Check for K8s security context issues  
          k8s_issues=$(find . -name "*.yaml" -o -name "*.yml" | xargs grep -l "kind: Deployment\|kind: Pod" | wc -l || echo "0")
          echo "Found $k8s_issues K8s deployments to check"
          
          echo "s3_count=$s3_issues" >> $GITHUB_OUTPUT
          echo "k8s_count=$k8s_issues" >> $GITHUB_OUTPUT

      - name: Auto-fix S3 Encryption Issues
        if: steps.check_issues.outputs.s3_count > 0 && (github.event.inputs.auto_fix == 'true' || github.event_name == 'pull_request')
        run: |
          echo "üîê Auto-fixing S3 encryption issues..."
          python scripts/fix_s3_encryption.py

      - name: Auto-fix Kubernetes Security Context Issues
        if: steps.check_issues.outputs.k8s_count > 0 && (github.event.inputs.auto_fix == 'true' || github.event_name == 'pull_request')
        run: |
          echo "üõ°Ô∏è Auto-fixing Kubernetes security context issues..."
          python scripts/fix_k8s_security.py

      - name: Run Post-Fix Checkov Scan
        run: |
          echo "üîç Running post-fix Checkov scan..."
          checkov -d . --output json --soft-fail > checkov_reports/report.json || true
          # Alternative method if above fails
          if [ ! -f checkov_reports/report.json ] || [ ! -s checkov_reports/report.json ]; then
            echo "Trying alternative Checkov command..."
            checkov --directory . --output json --soft-fail --output-file-path checkov_reports/report.json || true
          fi

      - name: Generate Final Markdown Report
        run: |
          echo "üìÑ Generating final security report..."
          python scripts/generate_md_report.py

      - name: Compare Results
        run: |
          echo "üìä Comparing scan results..."
          if [ -f checkov_reports/report_initial.json ] && [ -f checkov_reports/report.json ]; then
            initial_fails=$(jq '.results.failed_checks | length' checkov_reports/report_initial.json 2>/dev/null || echo "0")
            final_fails=$(jq '.results.failed_checks | length' checkov_reports/report.json 2>/dev/null || echo "0")
            
            echo "Initial failed checks: $initial_fails"
            echo "Final failed checks: $final_fails"
            echo "Issues fixed: $((initial_fails - final_fails))"
            
            echo "initial_fails=$initial_fails" >> $GITHUB_ENV
            echo "final_fails=$final_fails" >> $GITHUB_ENV
            echo "fixes_applied=$((initial_fails - final_fails))" >> $GITHUB_ENV
          fi

      - name: Commit Auto-fixes
        if: github.event_name == 'pull_request'
        run: |
          git config user.name "checkov-auto-fix-bot"
          git config user.email "security-bot@github.com"
          
          if [ -n "$(git status --porcelain)" ]; then
            echo "üîß Committing auto-fixes..."
            git add .
            git commit -m "üõ°Ô∏è Auto-fix: Security issues resolved by Checkov bot

            - Fixed S3 encryption configurations
            - Added Kubernetes security contexts
            - Resolved ${{ env.fixes_applied }} security findings
            
            Scan Results:
            - Before: ${{ env.initial_fails }} failed checks
            - After: ${{ env.final_fails }} failed checks"
            
            git push
            echo "‚úÖ Auto-fixes committed and pushed"
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: checkov-reports
          path: checkov_reports/

      - name: Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reportPath = 'checkov_reports/report.md';
            
            try {
              let reportContent = '';
              
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                
                // Add summary header with auto-fix results
                const summaryHeader = `# üõ°Ô∏è Checkov Security Scan Results
            
            **Auto-Remediation Summary:**
            - üîç Initial Issues: ${{ env.initial_fails || 'N/A' }}
            - ‚úÖ Issues Fixed: ${{ env.fixes_applied || '0' }}  
            - ‚ùå Remaining Issues: ${{ env.final_fails || 'N/A' }}
            
            ${process.env.fixes_applied > 0 ? 'üéâ **Auto-fixes have been applied and committed to this PR!**' : ''}
            
            ---
            
            `;
                
                reportContent = summaryHeader + report;
                
                // Truncate if too long
                const maxLength = 65000;
                if (reportContent.length > maxLength) {
                  reportContent = reportContent.substring(0, maxLength) + '\n\n... (Report truncated due to length)';
                }
              } else {
                reportContent = `# ‚ùå Checkov Scan Error
            
            Checkov scan completed but no report was generated. Please check the workflow logs for details.
            
            **Auto-fix Summary:**
            - Attempted to fix S3 encryption issues: ${{ steps.check_issues.outputs.s3_count }} buckets checked
            - Attempted to fix K8s security contexts: ${{ steps.check_issues.outputs.k8s_count }} deployments checked`;
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportContent
              });
              
              console.log('‚úÖ Successfully posted security report to PR');
              
            } catch (error) {
              console.log('‚ùå Error posting comment:', error.message);
            }

      - name: Create Issue for Remaining Problems
        if: env.final_fails > 0 && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('checkov_reports/report.md')) {
              const report = fs.readFileSync('checkov_reports/report.md', 'utf8');
              
              // Extract failed checks for issue
              const failedSection = report.match(/## ‚ùå Failed Checks.*?(?=##|$)/s);
              const failedContent = failedSection ? failedSection[0] : 'See full report in PR comments.';
              
              const issueBody = `# üö® Security Issues Require Manual Attention
            
            The automated security scan found **${{ env.final_fails }} issues** that could not be auto-fixed.
            
            **PR**: #${{ github.event.number }}
            **Branch**: ${{ github.head_ref }}
            **Commit**: ${{ github.sha }}
            
            ## Issues Found
            
            ${failedContent}
            
            ## Next Steps
            
            1. Review the failed security checks above
            2. Implement the recommended fixes manually  
            3. Test your changes
            4. Re-run the security scan to verify fixes
            
            ## Auto-Fix Status
            - ‚úÖ **Fixed**: ${{ env.fixes_applied }} issues
            - ‚ùå **Remaining**: ${{ env.final_fails }} issues (require manual attention)
            
            _This issue was automatically created by the security scanning workflow._`;
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® Security Issues Found in PR #${{ github.event.number }} - Manual Fix Required`,
                body: issueBody,
                labels: ['security', 'checkov', 'manual-fix-required']
              });
              
              console.log('‚úÖ Created issue for remaining security problems');
            }